init:
  image: "alpine:3.8"
  imagePullPolicy: IfNotPresent

# ------------------------------------------------------------------------------
# APP
# -----------------------------------------------------------------------------
name: identity-server-poc
namespace: innovation
domain: rnd-identityserver-dev.godeltech.com
## How many instances to run
replicaCount: 1
## Specifies the number of old replicas to retain to allow rollback
revisionHistoryLimit: 3
## Restart policy of the deployment
restartPolicy: Never
## Container configuration
container:
  port: 8000

# ------------------------------------------------------------------------------
# Application resources for the deployment
# -----------------------------------------------------------------------------
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: "128Mi"
    cpu: "50m"
  limits:
    memory: "256Mi"
    cpu: "200m"

# ------------------------------------------------------------------------------
# Application image version
# -----------------------------------------------------------------------------
image:
  registry: registry.gitlab.com
  ## image name
  repository:
  ## tag is the Application image tag
  tag: 0.0.1
  pullSecret:
  # If enabled will be created secret with data.dockerconfigjson
  # In this case password and username required
  # Otherwise the secret with name must be exists
  enabled: false
  name: gte-internal-registry-key
  ## image registry username
  username: xxx
  ## image registry password
  password: "xxx"
  ## pullPolicy is the Docker image pull policy
  ## It's recommended to change this to 'Always' if the image tag is 'latest'
  ## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
  ##
  pullPolicy: Always


# ------------------------------------------------------------------------------
# Application Service properties
# -----------------------------------------------------------------------------
service:
  ## port is the Kubernetes service port
  port: 8000
  targetPort: 8000
  ## type defines the Kubernetes service type ('ClusterIP', 'LoadBalancer', or 'NodePort')
  type: ClusterIP


# ------------------------------------------------------------------------------
# REDIS:
# values to override: https://github.com/helm/charts/tree/master/stable/redis
# ------------------------------------------------------------------------------
redis:
  ## If true, install the Redis chart alongside application
  enabled: false
  usePassword: false
  ## Use master-slave topology. If true 1 slave is by default
  cluster:
    enabled: false
# enabled = true > It is a part of redis service full name: Release.Name + nameOverride + master
# enabled = false > It is a redis service full name
  nameOverride:
  master:
# enabled = true/false > It is a redis service port
    port: 6379
    cache_db: 0
    persistence:
      size: 1Gi

# ------------------------------------------------------------------------------
# Application Liveness probe
# -----------------------------------------------------------------------------
livenessProbe:
  ## enabled is a flag to used to enable liveness probe
  enabled: false
  httpGet:
  path: /meta/health
  port: 80
  ## initialDelaySeconds is a delay before liveness probe is initiated
  initialDelaySeconds: 140
  ## periodSeconds decides how often to perform the probe
  periodSeconds: 10
  ## timeoutSeconds decides when the probe times out
  timeoutSeconds: 8
  ## successThreshold is the minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  ## failureThreshold is the minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 5

# ------------------------------------------------------------------------------
# Application Readiness probe
# -----------------------------------------------------------------------------
## Readiness check (pod ready to receive traffic) of the pod in deployment
readinessProbe:
  ## enabled is a flag to used to enable readiness probe
  enabled: false
  httpGet:
  path: /meta/health
  port: 80
  ## initialDelaySeconds is a delay before readiness probe is initiate
  initialDelaySeconds: 130
  ## periodSeconds decides how often to perform the probe
  periodSeconds: 10
  ## timeoutSeconds decides when the probe times out
  timeoutSeconds: 8
  ## successThreshold is the minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1
  ## failureThreshold is the minimum consecutive failures for the probe to be considered failed after having succeeded
  failureThreshold: 5
