apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "identity-server-poc.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "identity-server-poc.name" . }}
    app.kubernetes.io/version: {{ .Values.image.tag | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    helm.sh/chart: {{ template "identity-server-poc.chart" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "identity-server-poc.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/component: backend
  progressDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "identity-server-poc.name" . }}
        app.kubernetes.io/version: {{ .Values.image.tag | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        helm.sh/chart: {{ template "identity-server-poc.chart" . }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
      - name: gte-internal-python-identity-server-poc
      initContainers:
        - name: wait-for-dependency
          image: {{ .Values.init.image }}
          imagePullPolicy: {{ .Values.init.imagePullPolicy }}

      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.image.location }}
        imagePullPolicy: IfNotPresent
        env:
        - name: ENVIRONMENT_NAME
          value: {{ .Values.environment_name }}

        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: {{ .Values.container.port }}
        {{- $livenessProbe := .Values.livenessProbe -}}
        {{- if $livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ $livenessProbe.httpGet.path }}
            port: {{ $livenessProbe.httpGet.port }}
          initialDelaySeconds: {{ $livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ $livenessProbe.periodSeconds }}
          timeoutSeconds: {{ $livenessProbe.timeoutSeconds }}
          successThreshold: {{ $livenessProbe.successThreshold }}
          failureThreshold: {{ $livenessProbe.failureThreshold }}
        {{- end }}
        {{- $readinessProbe := .Values.readinessProbe -}}
        {{- if $readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ $readinessProbe.httpGet.path }}
            port: {{ $readinessProbe.httpGet.port }}
          initialDelaySeconds: {{ $readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ $readinessProbe.periodSeconds }}
          timeoutSeconds: {{ $readinessProbe.timeoutSeconds }}
          successThreshold: {{ $readinessProbe.successThreshold }}
          failureThreshold: {{ $readinessProbe.failureThreshold }}
        {{- end }}
