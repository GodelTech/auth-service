from typing import Any, Dict

from fastapi import status
from fastapi.responses import JSONResponse


class ErrorResponseBase(JSONResponse):
    @staticmethod
    def get_error_response_detail(
        error: str, error_desc: str
    ) -> Dict[str, str]:
        return {"error": error, "error_description": error_desc}


class InvalidRequestResponse(ErrorResponseBase):
    """
    Response class used to indicate an invalid request due to a missing required
    parameter(s).

    The HTTP status code of the response is set to 400 (Bad Request).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_request",
        error_desc="The request was missing required parameter(s).",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_400_BAD_REQUEST,
        )


class UnsupportedGrantTypeResponse(ErrorResponseBase):
    """
    Response class used to indicate an unsupported grant type.

    The HTTP status code of the response is set to 400 (Bad Request).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="unsupported_grant_type",
        error_desc="Requested grant type was not recognized by server.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_400_BAD_REQUEST,
        )


class UnauthorizedClientResponse(ErrorResponseBase):
    """
    Response class used to indicate that the client is not authorized to use the
    requested grant type.

    The HTTP status code of the response is set to 403 (Forbidden).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="unauthorized_client",
        error_desc="The client is not authorized to use the requested grant type.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_403_FORBIDDEN,
        )


class InvalidClientResponse(ErrorResponseBase):
    """
    Response class used to indicate that client authentication failed.

    The HTTP status code of the response is set to 401 (Unauthorized).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_client",
        error_desc="Client authentication failed.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_401_UNAUTHORIZED,
        )


class InvalidGrantResponse(ErrorResponseBase):
    """
    Response class used to indicate that the provided grant is invalid or expired.

    The HTTP status code of the response is set to 400 (Bad Request).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_grant",
        error_desc="Provided grant is invalid or expired.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_400_BAD_REQUEST,
        )


class InvalidScopeResponse(ErrorResponseBase):
    """
    Response class used for auth and access token requests (password and client
    credentials grants), indicating an invalid or unknown requested scope.

    The HTTP status code of the response is set to 400 (Bad Request).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_scope",
        error_desc="The requested scope is invalid or unknown.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_400_BAD_REQUEST,
        )


class AccessDeniedResponse(ErrorResponseBase):
    """
    Response class used when the user or authorization server denied the request.

    The HTTP status code of the response is set to 403 (Forbidden).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="access_denied",
        error_desc="The user or authorization server denied the request.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_403_FORBIDDEN,
        )


class UnsupportedResponseType(ErrorResponseBase):
    """
    Response class used when the server does not support obtaining an authorization
    code using this method, for example if the authorization server never implemented the implicit grant type.

    The HTTP status code of the response is set to 400 (Bad Request).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="unsupported_response_type",
        error_desc="The user or authorization server denied the request.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_400_BAD_REQUEST,
        )


class UserNotFoundResponse(ErrorResponseBase):
    """
    Response class used when the requested user is missing from the database.

    The HTTP status code of the response is set to 404 (Not Found).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_grant",
        error_desc="The user is not found or is invalid.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_404_NOT_FOUND,
        )


class WrongPasswordResponse(ErrorResponseBase):
    """
    Response class used when the the user provides a wrong password.

    The HTTP status code of the response is set to 401 (Unauthorized).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_grant",
        error_desc="The user authentication failed. Check your password.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_401_UNAUTHORIZED,
        )


class ClientRedirectUriErrorResponse(ErrorResponseBase):
    """Response class used when the client`s redirect_uri could not be found in the database.

    The HTTP status code of the response is set to 404 (Not Found).

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """

    detail = ErrorResponseBase.get_error_response_detail(
        error="invalid_request",
        error_desc="The client's redirect_uri could not be found in the database.",
    )

    def __init__(self, detail: Any = detail) -> None:
        super().__init__(
            content=detail,
            status_code=status.HTTP_404_NOT_FOUND,
        )


class UserCodeNotFoundErrorResponse(ErrorResponseBase):
    """Response class used when the database does not contain the user code you are looking for.

    The HTTP status code of the response is set to 404 (Not Found)

    Args:
        detail (any, optional): Additional information about the error. Defaults
            to the value generated by 'get_error_response_detail' method.
    """
