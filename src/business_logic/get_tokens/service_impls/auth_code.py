from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from src.business_logic.get_tokens.dto import RequestTokenModel, ResponseTokenModel
    from src.business_logic.common.interfaces import ValidatorProtocol
    from src.business_logic.jwt_manager.interfaces import JWTManagerProtocol


class AuthorizationCodeTokenService:
    """
    Service for switching authorization code that was generated by 
    authorization endpoint in auth code flow and sent to the client 
    as a response.
    """
    def __init__(
            self,
            grant_validator: ValidatorProtocol,
            redirect_uri_validator: ValidatorProtocol,
            client_validator: ValidatorProtocol,
            code_validator: ValidatorProtocol,
            jwt_manager: JWTManagerProtocol,
    ):
        self._grant_validator = grant_validator
        self._redirect_uri_validator = redirect_uri_validator
        self._client_validator = client_validator
        self._code_validator = code_validator
        self._jwt_manager = jwt_manager

    async def get_tokens(self, request_data: 'RequestTokenModel') -> 'ResponseTokenModel':
        await self._client_validator(request_data.client_id)
        await self._code_validator(request_data.code, request_data.client_id, request_data.grant_type)
        await self._grant_validator(request_data.code, request_data.grant_type)
        await self._redirect_uri_validator(request_data.redirect_uri, request_data.client_id)
