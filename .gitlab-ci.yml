stages:          # List of stages for jobs, and their order of execution
  - build
#  - container
#  - deploy-to-dev


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  SERVICE_NAME: identity-server-poc
  IMAGE: repository.godeltech.com:18443/python:3.10-slim-buster





# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/


build-and-test:
  stage: build
  image: ${IMAGE}
  variables:
    SERVICE: "${SERVICE_NAME}"
  script:
    - echo "Build and test is passing..."
#    - apt-get update && pip install poetry
#    - printf '#!/bin/sh\nexit 0' > /usr/sbin/policy-rc.d
#    - apt-get install dialog apt-utils -y
#    - apt-get install postgresql -y
#    - runuser -l postgres -c "psql -c \"ALTER ROLE postgres WITH PASSWORD 'postgres';\""
#    - runuser -l postgres -c "psql -c \"CREATE DATABASE is_db;\""
#    - apt-get install -y build-essential libpq-dev gettext make
#    - poetry export -f requirements.txt --output requirements.txt --without-hashes --dev
#    - python -m venv .venv
#    - source .venv/bin/activate
#    - pip install --no-cache-dir --upgrade -r requirements.txt
#    - make test
  rules:
    - when: always

