include:
  - project: 'gte-internal/ci-cd/essential'
    ref: "0.1.4"
    file: '/ci-templates/.deployment.yml'
  - project: 'gte-internal/ci-cd/essential'
    ref: "0.1.2"
    file: '/ci-templates/.container.yml'
  - project: 'gte-internal/ci-cd/e2e-testing'
    ref: "0.1"
    file: '/ci-templates/.e2e-tests.yml'
  - project: 'gte-internal/ci-cd/deployment-with-pact'
    ref: "0.1"
    file: '/ci-templates/.deployment-with-pact.yml'


stages:
  - container
  - build
  - deploy-to-dev


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  SERVICE_NAME: identity-server-poc
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_IMAGE_PATH: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${SERVICE_NAME}-${CI_PIPELINE_ID}


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/


#################
# CONTAINER
#################

container:docker-build:
  extends: .docker-build-artifact
  only:
    - Configure-CI-CD-pipeline


#################
# BUILD-AND-TEST
#################

build-and-test:
  stage: build
  image: docker:20
  services:
    - docker:20-dind
  environment:
    name: pipeline
  variables:
    ENV_FOR_DYNACONF: pipeline
#    name: pipeline
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - echo ${CI_ENVIRONMENT_NAME}
    - echo ${ENV_FOR_DYNACONF}
    - docker run -d --name identity-server-provider -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock ${DOCKER_IMAGE_PATH}
    - docker ps
    - docker exec -i identity-server-provider sh -c "pytest --cov=src"
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  only:
    - Configure-CI-CD-pipeline


#################
# DEPLOY-TO-DEV
#################

#deploy-to-dev:
#  extends: .deploy-to-dev-ext
#  stage: deploy-to-dev
#  script:
#    - echo ${STAGE_IMAGE_PATH}
#    - echo ${CI_REGISTRY}
#    - echo ${CI_DEPLOY_USER}
#    - echo ${CI_DEPLOY_PASSWORD}
#    - echo ${CI_JOB_TOKEN}
#    - echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_HASH}
#    - echo ${CI_PIPELINE_ID}
#    - echo ${CI_ENVIRONMENT_NAME}
#    - echo ${CI_PROJECT_PATH}
#    - echo ${CONTAINER_REGISTRY_PROXY}
#    - echo ${CI_PIPELINE_ID}
#    - echo ${SERVICE_NAME}
#    - echo ${CI_COMMIT_HASH}
#  variables:
#    ENV_FOR_DYNACONF: development
#    SERVICE: "${SERVICE_NAME}"
#    HELM_PATH: ./chart
#  only:
#    - Configure-CI-CD-pipeline
