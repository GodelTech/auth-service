include:
  - project: 'gte-internal/ci-cd/essential'
    ref: "0.1.4"
    file: '/ci-templates/.deployment.yml'
  - project: 'gte-internal/ci-cd/essential'
    ref: "0.1.2"
    file: '/ci-templates/.container.yml'
  - project: 'gte-internal/ci-cd/e2e-testing'
    ref: "0.1"
    file: '/ci-templates/.e2e-tests.yml'
  - project: 'gte-internal/ci-cd/deployment-with-pact'
    ref: "0.1"
    file: '/ci-templates/.deployment-with-pact.yml'


stages:
  - container
  - build
#  - deploy-to-dev


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  SERVICE_NAME: identity-server-poc
#  IMAGE: repository.godeltech.com:18443/python:3.10-slim-buster
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  IMAGE: docker:20.10.16
  CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_HASH}


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/


#################
# CONTAINER
#################

container:docker-build:
  extends: .docker-build-artifact
  only:
    - Configure-CI-CD-pipeline


build-and-test:
  stage: build
  image: ${IMAGE}
  variables:
    SERVICE: "${SERVICE_NAME}"
    ENV_FOR_DYNACONF: test
    DOCKER_HOST: tcp://docker:2375
    # This instructs Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:20.10.16-dind
  before_script:
    - docker info
  script:
    - echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_HASH}
    - echo ${CONTAINER_IMAGE}
    - docker images
#    - docker build -t identity .
    - docker run -d --name identity-server-provider --net=host -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock CONTAINER_IMAGE
    - docker ps
    - docker exec -it identity-server-provider sh -c "pytest -ra -cov tests"
  rules:
    - when: always



#
#
#deploy-to-dev:
#  extends: .deploy-to-dev-ext
#  stage: deploy-to-dev
#  script:
#    - echo ${STAGE_IMAGE_PATH}
#    - echo ${CI_REGISTRY}
#    - echo ${CI_DEPLOY_USER}
#    - echo ${CI_DEPLOY_PASSWORD}
#    - echo ${CI_JOB_TOKEN}
#    - echo ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_HASH}
#    - echo ${CI_PIPELINE_ID}
#    - echo ${SERVICE_NAME}
#    - echo ${CI_ENVIRONMENT_NAME}
#    - echo ${CI_PROJECT_PATH}
#    - echo ${CONTAINER_REGISTRY_PROXY}
#    - echo ${CI_PIPELINE_ID}
#    - echo ${SERVICE_NAME}
#    - echo ${CI_COMMIT_HASH}
#  variables:
#    ENV_FOR_DYNACONF: development
#    SERVICE: "${SERVICE_NAME}"
#    HELM_PATH: ./chart
#  only:
#    - Configure-CI-CD-pipeline